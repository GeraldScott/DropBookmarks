/*
 * The MIT License
 *
 * Copyright 2016 Dmitry Noranovich <javaeeeee (at) gmail (dot) com>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.javaeeeee.dropbookmarks.db;

import com.javaeeeee.dropbookmarks.core.Bookmark;
import io.dropwizard.hibernate.AbstractDAO;
import java.util.List;
import java.util.Optional;
import org.hibernate.SessionFactory;

/**
 * Data Access Object to manipulate bookmarks.
 *
 * @author Dmitry Noranovich javaeeeee (at) gmail (dot) com
 */
public class BookmarkDAO extends AbstractDAO<Bookmark> {

    /**
     * Constructor that initializes bookmarks DAO.
     *
     * @param sessionFactory Hibernate Session Factory.
     */
    public BookmarkDAO(SessionFactory sessionFactory) {
        super(sessionFactory);
    }

    /**
     * Find bookmarks for a particular user.
     *
     * @param id the id of the user.
     * @return List of all bookmarks stored by the user identified by id.
     */
    public List<Bookmark> findByUserId(int id) {
        return list(namedQuery("Bookmark.findAll"));
    }

    /**
     * Method to find the bookmark with a particular id.
     *
     * @param id the id of a bookmark.
     * @return An Optional with a bookmark if found and an empty Optional
     * otherwise.
     */
    public Optional<Bookmark> findById(int id) {
        return Optional.ofNullable(get(id));
    }

    /**
     * Method looks for the bookmark characterized by id for a user
     * characterized by userId.
     *
     * @param id the id of a bookmark to look for.
     * @param userId the id of the user owner of the bookmark.
     * @return Optional containing the bookmark or an empty Optional if the
     * bookmark was not found.
     */
    public Optional<Bookmark> findByIdAndUserId(int id, int userId) {
        return Optional.ofNullable(
                uniqueResult(
                        namedQuery("Bookmark.findByIdAndUserId")
                        .setParameter("id", id)
                        .setParameter("userId", userId)
                )
        );
    }

    /**
     * Method saves a bookmark; either creates new or modifies an existent one.
     *
     * @param bookmark a bookmark to be saved.
     * @return the saved bookmark updated with data generated by the database.
     */
    public Bookmark save(Bookmark bookmark) {
        return persist(bookmark);
    }

    /**
     * Method removes the bookmark from the database.
     *
     * @param id the id of the bookmark to be deleted.
     */
    public void delete(Integer id) {
        namedQuery("Bookmark.remove")
                .setParameter("id", id)
                .executeUpdate();
    }
}
